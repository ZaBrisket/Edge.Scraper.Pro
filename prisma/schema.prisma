// Target List Formatter Database Schema
// Comprehensive data model for CSV/XLSX upload, mapping, and export system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management (basic session-based auth)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  datasets         Dataset[]
  mappingTemplates MappingTemplate[]
  jobs             Job[]

  @@map("users")
}

// Uploaded datasets (raw CSV/XLSX files)
model Dataset {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // File metadata
  originalFilename String
  fileSize         Int
  mimeType         String
  rowsEstimated    Int?

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploads  Upload[]
  records  Record[]
  jobs     Job[]

  @@map("datasets")
}

// Upload tracking (S3 presigned upload flow)
model Upload {
  id        String   @id @default(cuid())
  datasetId String
  s3Key     String   @unique
  s3Bucket  String
  status    String   @default("pending") // pending, committed, failed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Upload metadata
  filename    String
  contentType String
  fileSize    Int?
  expiresAt   DateTime

  // Relations
  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)

  @@map("uploads")
}

// Mapping templates (reusable column mapping configurations)
model MappingTemplate {
  id          String   @id @default(cuid())
  name        String
  version     String   @default("1.0")
  description String?
  sourceHint  String? // e.g., "SourceScrub", "Apollo", etc.
  userId      String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  fieldDefs  FieldDef[]
  jobs       Job[]

  @@unique([name, version, userId])
  @@map("mapping_templates")
}

// Field definitions within mapping templates
model FieldDef {
  id                String   @id @default(cuid())
  mappingTemplateId String
  targetField       String // normalized field name (e.g., "company_name")
  sourceHeaders     String[] // array of possible source column names
  transform         String? // transformation rule (e.g., "trim", "titleCase", "currency")
  required          Boolean  @default(false)
  defaultValue      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  mappingTemplate MappingTemplate @relation(fields: [mappingTemplateId], references: [id], onDelete: Cascade)

  @@map("field_defs")
}

// Export jobs (async processing queue)
model Job {
  id              String   @id @default(cuid())
  userId          String
  datasetId       String
  templateId      String?
  format          String // "xlsx" | "pdf"
  theme           String   @default("utss-2025")
  status          String   @default("queued") // queued, processing, completed, failed
  idempotencyKey  String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?

  // Job configuration
  payload Json?

  // Relations
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  dataset  Dataset          @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  template MappingTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  logs     JobLog[]
  artifacts Artifact[]

  @@map("jobs")
}

// Job execution logs
model JobLog {
  id        String   @id @default(cuid())
  jobId     String
  level     String // "info", "warn", "error"
  message   String
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_logs")
}

// Generated artifacts (XLSX/PDF files)
model Artifact {
  id          String   @id @default(cuid())
  jobId       String
  filename    String
  s3Key       String   @unique
  s3Bucket    String
  contentType String
  fileSize    Int?
  checksum    String? // for integrity verification
  createdAt   DateTime @default(now())
  expiresAt   DateTime? // optional expiry for cleanup

  // Relations
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("artifacts")
}

// Normalized target records (transformed data)
model Record {
  id        String   @id @default(cuid())
  datasetId String
  rowIndex  Int // original row position
  createdAt DateTime @default(now())

  // Normalized target fields (v1 schema)
  rank                       Int?
  companyName                String? // required field
  city                       String?
  state                      String?
  description                String?
  estimatedRevenueMillions   Float?
  executiveName              String?
  executiveTitle             String?
  logoUrl                    String?

  // Raw data preservation
  rawData Json?

  // Relations
  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)

  @@unique([datasetId, rowIndex])
  @@map("records")
}
